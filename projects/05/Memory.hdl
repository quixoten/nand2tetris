// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    /*
      000 0000 0000 0000 to 011 1111 1111 1111 =      ram selected
      100 0000 0000 0000 to 101 1111 1111 1111 =   screen selected
      110 0000 0000 0000 to 110 0000 0000 0000 = keyboard selected
      110 0000 0000 0001 to 111 1111 1111 1111 = invalid/undefined
      ┃┃┃
      ┃┃┗━ address[12]
      ┃┗━━ address[13]
      ┗━━━ address[14]
    */

    PARTS:
    Not(in=address[14], out=ram-selected);
    And(a=ram-selected, b=load, out=ram-load);
    RAM16K(in=in, load=ram-load, address[0..13]=address[0..13], out=ram-out);

    Not(in=address[13], out=not-address-13);
    And(a=address[14], b=not-address-13, out=screen-selected);
    And(a=screen-selected, b=load, out=screen-load);
    Screen(in=in, load=screen-load, address=address[0..12], out=screen-out);

    Keyboard(out=keyboard-out);

    Mux8Way16( a=ram-out                    /* address[12..14] = 000 */
             , b=ram-out                    /* address[12..14] = 001 */
             , c=ram-out                    /* address[12..14] = 010 */
             , d=ram-out                    /* address[12..14] = 011 */
             , e=screen-out                 /* address[12..14] = 100 */
             , f=screen-out                 /* address[12..14] = 101 */
             , g=keyboard-out               /* address[12..14] = 110 */
             , h=false                      /* address[12..14] = 111 */
             , sel=address[12..14]
             , out=out
             );
}
